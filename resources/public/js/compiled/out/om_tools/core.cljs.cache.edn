;; Analyzed by ClojureScript 0.0-3126
{:defs {set-state?! {:protocol-inline nil, :meta {:arglists (quote ([owner v] [owner korks v])), :added "0.2.0", :doc "Calls om.core/set-state! when current value not= to v and returns\n   updated owner, otherwise nil.\n   Used to prevent no-op updates from entering render queue", :end-column 18, :end-line 335, :column 7, :line 335, :file "/Users/adam/Copy/play/clj/outliner/resources/public/js/compiled/out/om_tools/core.cljs"}, :added "0.2.0", :name om-tools.core/set-state?!, :variadic false, :file "resources/public/js/compiled/out/om_tools/core.cljs", :end-column 18, :method-params ([owner v] [owner korks v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{any clj-nil}, :variadic false, :max-fixed-arity 2} {:tag #{any clj-nil}, :variadic false, :max-fixed-arity 3}), :line 335, :end-line 335, :max-fixed-arity 3, :fn-var true, :arglists (quote ([owner v] [owner korks v])), :doc "Calls om.core/set-state! when current value not= to v and returns\n   updated owner, otherwise nil.\n   Used to prevent no-op updates from entering render queue", :test true}, ->t29963 {:protocol-inline nil, :meta {:file nil, :arglists (quote ([get-state owner state-proxy meta29964])), :factory :positional, :skip-protocol-flag #{cljs.core/IReset cljs.core/ISwap cljs.core/IMeta cljs.core/IDeref cljs.core/IWithMeta}, :protocols #{cljs.core/IReset cljs.core/ISwap cljs.core/IMeta cljs.core/IDeref cljs.core/IWithMeta}, :anonymous true}, :protocols #{cljs.core/IReset cljs.core/ISwap cljs.core/IMeta cljs.core/IDeref cljs.core/IWithMeta}, :name om-tools.core/->t29963, :variadic false, :file "resources/public/js/compiled/out/om_tools/core.cljs", :method-params ([get-state owner state-proxy meta29964]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 7, :factory :positional, :methods ({:tag om-tools.core/t29963, :variadic false, :max-fixed-arity 4}), :line 158, :max-fixed-arity 4, :fn-var true, :arglists (quote ([get-state owner state-proxy meta29964])), :skip-protocol-flag #{cljs.core/IReset cljs.core/ISwap cljs.core/IMeta cljs.core/IDeref cljs.core/IWithMeta}, :test true}, t29963 {:num-fields 4, :protocols #{cljs.core/IReset cljs.core/ISwap cljs.core/IMeta cljs.core/IDeref cljs.core/IWithMeta}, :name om-tools.core/t29963, :file "resources/public/js/compiled/out/om_tools/core.cljs", :type true, :anonymous true, :column 7, :line 158, :record false, :skip-protocol-flag #{cljs.core/IReset cljs.core/ISwap cljs.core/IMeta cljs.core/IDeref cljs.core/IWithMeta}}, ->t29960 {:protocol-inline nil, :meta {:file nil, :arglists (quote ([get-state owner state-proxy meta29961])), :factory :positional, :skip-protocol-flag #{cljs.core/IReset cljs.core/ISwap cljs.core/IMeta cljs.core/IDeref cljs.core/IWithMeta}, :protocols #{cljs.core/IReset cljs.core/ISwap cljs.core/IMeta cljs.core/IDeref cljs.core/IWithMeta}, :anonymous true}, :protocols #{cljs.core/IReset cljs.core/ISwap cljs.core/IMeta cljs.core/IDeref cljs.core/IWithMeta}, :name om-tools.core/->t29960, :variadic false, :file "resources/public/js/compiled/out/om_tools/core.cljs", :method-params ([get-state owner state-proxy meta29961]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 7, :factory :positional, :methods ({:tag om-tools.core/t29960, :variadic false, :max-fixed-arity 4}), :line 158, :max-fixed-arity 4, :fn-var true, :arglists (quote ([get-state owner state-proxy meta29961])), :skip-protocol-flag #{cljs.core/IReset cljs.core/ISwap cljs.core/IMeta cljs.core/IDeref cljs.core/IWithMeta}, :test true}, t29960 {:num-fields 4, :protocols #{cljs.core/IReset cljs.core/ISwap cljs.core/IMeta cljs.core/IDeref cljs.core/IWithMeta}, :name om-tools.core/t29960, :file "resources/public/js/compiled/out/om_tools/core.cljs", :type true, :anonymous true, :column 7, :line 158, :record false, :skip-protocol-flag #{cljs.core/IReset cljs.core/ISwap cljs.core/IMeta cljs.core/IDeref cljs.core/IWithMeta}}, state-proxy {:protocol-inline nil, :meta {:arglists (quote ([owner])), :doc "Returns an atom-like object for reading and writing Om component\n   state.\n\n   Note: Behavior may exactly not match atoms when deref'ing\n   immediately following a reset!/swap! because Om processes state\n   changes asynchronously in separate render phases.", :end-column 18, :end-line 148, :column 7, :line 148, :file "/Users/adam/Copy/play/clj/outliner/resources/public/js/compiled/out/om_tools/core.cljs"}, :name om-tools.core/state-proxy, :variadic false, :file "resources/public/js/compiled/out/om_tools/core.cljs", :end-column 18, :method-params ([owner]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{om-tools.core/t29963 clj-nil}, :variadic false, :max-fixed-arity 1}), :line 148, :end-line 148, :max-fixed-arity 1, :fn-var true, :arglists (quote ([owner])), :doc "Returns an atom-like object for reading and writing Om component\n   state.\n\n   Note: Behavior may exactly not match atoms when deref'ing\n   immediately following a reset!/swap! because Om processes state\n   changes asynchronously in separate render phases.", :test true}}, :imports nil, :requires {s schema.core, schema.core schema.core, p plumbing.core, plumbing.core plumbing.core, plumbing.fnk.schema plumbing.fnk.schema, om.core om.core, om om.core}, :uses nil, :require-macros {s schema.core, schema.core schema.core, p plumbing.core, plumbing.core plumbing.core, plumbing.fnk.schema plumbing.fnk.schema, om.core om.core, om om.core}, :use-macros nil, :excludes #{}, :doc "Tools for Om", :name om-tools.core}